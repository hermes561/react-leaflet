{"version":3,"sources":["chat_location_current.svg","chat_location.svg","API.js","MessageCard.js","App.js","serviceWorker.js","index.js","chat_location_shadow.svg"],"names":["module","exports","__webpack_require__","p","API_URL","window","location","hostname","getMesages","fetch","then","res","json","messages","haveSeenLocation","reduce","all","message","key","concat","latitude","toFixed","longitude","otherMessages","push","MessageCard","props","formShow","sendingMessage","sentMessage","haveUserLocation","react_default","a","createElement","className","src","alt","CardText","Form","onSubmit","handleSubmit","FormGroup","Label","for","Input","onChange","handleOnChange","type","name","id","placeholder","Button","colour","disabled","formIsNotValid","Card","CardBody","CardTitle","error","myIcon","Leaflet","icon","iconUrl","currentIconUrl","iconSize","iconAnchor","popupAnchor","shadowUrl","iconShadowUrl","shadowRetinaUrl","shadowSize","shadowAnchor","othersIcons","othersIconUrl","schema","Joi","object","keys","string","regex","required","min","max","App","state","lat","lng","zoom","userMeassage","mapRef","React","createRef","formIsValid","_this","validate","e","preventDefault","setState","messageToSend","thisInst","Object","assertThisInitialized","method","headers","content-type","body","JSON","stringify","result","setTimeout","catch","objectSpread","defineProperty","target","value","_this2","this","Promise","resolve","navigator","geolocation","getCurrentPosition","position","coords","map","current","leafletElement","invalidateSize","markedLocation","Marker","othersLocations","length","_id","Popup","item","i","Map","center","ref","TileLayer","attribution","url","Component","Boolean","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7283018.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat_location_current.7267d3fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat_location.0cb38dea.svg\";","const API_URL = window.location.hostname === 'localhost'?'http://localhost:5000/api/v1/messages':'https://thawing-beyond-39791.herokuapp.com/api/v1/messages'\n\nexport function getMesages() {\n    return fetch(API_URL)\n    .then(res => res.json())\n    .then(messages=> {\n        const haveSeenLocation = {};\n        return messages.reduce((all, message) => {\n            const key = `${message.latitude.toFixed(3)}${message.longitude.toFixed(3)}`;\n            if(haveSeenLocation[key]) {\n                haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n                haveSeenLocation[key].otherMessages.push(message);\n            } else {\n                haveSeenLocation[key] = message;\n                all.push(message);\n            }\n            return all;\n        },[])\n    })\n}\n\nexport function getLocation() {\n    return new Promise((resolve)=> {\n        navigator.geolocation.getCurrentPosition((position)=> {\n            resolve({\n                lat:position.coords.latitude,\n                lng:position.coords.longitude\n            })\n        },(error) =>{\n            resolve (\n                fetch('https://ipapi.co/json')\n                .then(res=>res.json())\n                .then(location=>{\n                    return {\n                        lat:location.latitude,\n                        lng:location.longitude\n                    }\n                })\n            )\n        }); \n    })\n}\n\nexport function sendMessage( message) {\n    return fetch(API_URL,{\n        method: 'POST',\n        headers: {\n           'content-type':'application/json'   \n        },\n        body: JSON.stringify(message)\n    })\n    .then(res => res.json());\n}","import React from 'react';\nimport { Card, CardText, CardBody,CardTitle, Button, Form, FormGroup, Label, Input} from 'reactstrap';\n\nexport default (props) => {\n    const formShow = (!props.sendingMessage && !props.sentMessage && props.haveUserLocation)? (\n        <Form onSubmit={props.handleSubmit}>\n            <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input onChange={props.handleOnChange} type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter your Name\" />\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"message\">Message</Label>\n                <Input onChange={props.handleOnChange} type=\"textarea\" name=\"message\" id=\"message\" placeholder=\"Enter your Message\" />\n            </FormGroup>\n            <Button colour=\"info\" disabled={props.formIsNotValid}>Send</Button>\n        </Form>\n    ): (props.sendingMessage || !props.haveUserLocation?\n       <img className=\"loadin_img\" src=\"loading.gif\" alt=\"loading...\" /> :\n       <CardText>Thanks for submitting a message!</CardText>       \n    );\n    \n    return (\n        <Card className=\"message-form\">\n            <CardBody>\n              <CardTitle>Welcome to GuestM.app!</CardTitle>\n              <CardText>Live a message with your location!</CardText>\n              {props.error?(<CardText className=\"warning\">{props.error}</CardText>):''}\n              {formShow}\n            </CardBody>\n        </Card>\n    );\n};\n","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n//import 'bootstrap/scss/_card.scss'\nimport Leaflet from 'leaflet'\nimport Joi from 'joi';\nimport othersIconUrl from './chat_location_current.svg';\nimport currentIconUrl from './chat_location.svg';\nimport iconShadowUrl from './chat_location_shadow.svg';\nimport {getMesages, getLocation, sendMessage} from './API';\nimport MessageCard from './MessageCard';\n\n\nconst myIcon = Leaflet.icon({\n    iconUrl: currentIconUrl,\n    iconSize: [50, 82],\n    iconAnchor: [9, 57],\n    popupAnchor: [25, -65],\n    shadowUrl: iconShadowUrl,\n    shadowRetinaUrl: iconShadowUrl,\n    shadowSize: [50, 82],\n    shadowAnchor: [9, 57]\n});\n\nconst othersIcons = Leaflet.icon({\n    iconUrl: othersIconUrl,\n    iconSize: [50, 82],\n    iconAnchor: [9, 57],\n    popupAnchor: [25, -65],\n    shadowUrl: iconShadowUrl,\n    shadowRetinaUrl: iconShadowUrl,\n    shadowSize: [50, 82],\n    shadowAnchor: [9, 57]\n});\n\nconst schema = Joi.object().keys({\n    name: Joi.string().regex(/^[a-zA-Z0-9À-ž -_]{1,100}$/).required(),\n    message: Joi.string().min(1).max(500).required()\n});\n\n\nclass App extends Component {\n    state = {\n        haveUserLocation: false,\n        location: {\n            lat: 44.439,\n            lng: 26.096,\n        },\n        zoom: 3,\n        userMeassage: {\n            name:'',\n            message:''   \n        },\n        sendingMessage: false,\n        sentMessage: false,\n        messages: [],\n        error:null\n    }\n    \n    mapRef = React.createRef();\n    \n    \n    componentDidMount(){\n        getMesages()\n        .then(messages=> {\n            this.setState({\n                messages\n            })\n        })\n        .catch(error => this.setState({ error: 'Canot load data from server!'}));\n        \n        getLocation()\n        .then(location => {\n            this.setState({\n                location,\n                zoom:15,\n                haveUserLocation: true\n            })\n        });\n         \n        const map = this.mapRef.current\n        if (map !== null) {\n            setTimeout(function(){ \n                map.leafletElement.invalidateSize();\n            }, 400);\n        }  \n    }\n    \n    formIsValid = () => {\n        const userMeassage = {\n            name:this.state.userMeassage.name,\n            message:this.state.userMeassage.message,\n        }\n        const result = Joi.validate(userMeassage, schema);\n        //console.log('validation error: '+result.error);\n        return result.error===null && this.state.haveUserLocation\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n//        console.log(this.state.userMeassage);\n        \n        if(this.formIsValid()) {\n            this.setState({\n                sendingMessage: true\n            });\n            \n            const messageToSend = {\n                name:this.state.userMeassage.name,\n                message:this.state.userMeassage.message, \n                latitude: this.state.location.lat,\n                longitude: this.state.location.lng\n            }\n            let thisInst = this;\n            \n            sendMessage(messageToSend)\n            .then(result=> {\n                setTimeout(function(){ \n                    thisInst.setState({\n                        sendingMessage: false,\n                        sentMessage: true\n                    });\n                    getMesages()\n                    .then(messages=> {\n                        thisInst.setState({\n                            messages\n                        })\n                    })\n                    .catch(error => {\n                        thisInst.setState({ error: 'Canot load data from server!'});\n                    });\n                },1000);\n            })\n            .catch(error => {\n                setTimeout(function(){\n                    thisInst.setState({ \n                        error: 'Canot add data to server!',\n                        sendingMessage: false,\n                        sentMessage: false\n                   })\n               },1000);\n            })\n            ;\n        }\n    }\n    \n    handleOnChange = (e) => {\n        this.setState({\n            userMeassage: {\n                ...this.state.userMeassage,\n                [e.target.name]: e.target.value\n            } \n        })       \n    }\n    \n    render() {\n        const location = this.state.location;\n        const markedLocation = !this.state.sentMessage?(\n            <Marker \n               position={[location.lat,location.lng]}\n               icon ={myIcon}\n            >\n            </Marker> \n        ):'';\n\n        const othersLocations = this.state.messages.length?(\n            this.state.messages.map(message => {\n                return(\n                    <Marker key={message._id}\n                       position={[message.latitude,message.longitude]}\n                       icon ={othersIcons}\n                    >\n                      <Popup>\n                        <p><em>{message.name}</em>: {message.message}</p>\n                        {message.otherMessages?(\n                           message.otherMessages.map((item, i) => {\n                               return(\n                                  <p key={'item'+i}><em>{item.name}</em>: {item.message}</p> \n                               )\n                           }) \n                        ):''}\n                      </Popup>\n                    </Marker> \n                )\n            })\n        ):'';\n\n        return (\n            <div className=\"map\">    \n                <Map center={[location.lat,location.lng]} zoom={this.state.zoom}  ref={this.mapRef} className=\"map\">\n                    <TileLayer\n                      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> Chat location by Iconika from the Noun Project'\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {markedLocation}\n                    {othersLocations}\n                </Map>\n                <MessageCard \n                    sendingMessage={this.state.sendingMessage} \n                    sentMessage={this.state.sentMessage} \n                    haveUserLocation={this.state.haveUserLocation}\n                    error={this.state.error} \n                    handleSubmit ={this.handleSubmit}\n                    handleOnChange ={this.handleOnChange}\n                    formIsNotValid ={!this.formIsValid()}        \n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Leaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/'\n//import 'leaflet/dist/images/marker-icon.png'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chat_location_shadow.5621c14c.svg\";"],"sourceRoot":""}