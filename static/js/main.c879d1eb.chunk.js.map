{"version":3,"sources":["chat_location_current.svg","chat_location.svg","App.js","serviceWorker.js","index.js","chat_location_shadow.svg"],"names":["module","exports","__webpack_require__","p","myIcon","Leaflet","icon","iconUrl","currentIconUrl","iconSize","iconAnchor","popupAnchor","shadowUrl","iconShadowUrl","shadowRetinaUrl","shadowSize","shadowAnchor","othersIcons","othersIconUrl","schema","Joi","object","keys","name","string","regex","required","message","min","max","API_URL","window","location","hostname","App","state","haveUserLocation","lat","lng","zoom","userMeassage","sendingMessage","sentMessage","messages","error","mapRef","React","createRef","formIsValid","_this","validate","handleSubmit","e","preventDefault","setState","fetch","method","headers","content-type","body","JSON","stringify","latitude","longitude","then","res","json","thisInst","Object","assertThisInitialized","setTimeout","getMesages","catch","handleOnChange","objectSpread","defineProperty","target","value","_this2","this","haveSeenLocation","reduce","all","key","concat","toFixed","otherMessages","push","_this3","navigator","geolocation","getCurrentPosition","position","console","log","coords","map","current","leafletElement","invalidateSize","markedLocation","react_default","a","createElement","Marker","othersLocations","length","_id","Popup","item","i","formShow","className","src","alt","CardText","Form","onSubmit","FormGroup","Label","for","Input","onChange","type","id","placeholder","Button","colour","disabled","Map","center","ref","TileLayer","attribution","url","Card","CardBody","CardTitle","Component","Boolean","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4iBCalCC,EAASC,IAAQC,KAAK,CACxBC,QAASC,IACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,IAChBC,YAAa,CAAC,IAAK,IACnBC,UAAWC,IACXC,gBAAiBD,IACjBE,WAAY,CAAC,GAAI,IACjBC,aAAc,CAAC,EAAG,MAGhBC,EAAcZ,IAAQC,KAAK,CAC7BC,QAASW,IACTT,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,IAChBC,YAAa,CAAC,IAAK,IACnBC,UAAWC,IACXC,gBAAiBD,IACjBE,WAAY,CAAC,GAAI,IACjBC,aAAc,CAAC,EAAG,MAGhBG,EAASC,IAAIC,SAASC,KAAK,CAC7BC,KAAMH,IAAII,SAASC,MAAM,sCAA8BC,WACvDC,QAASP,IAAII,SAASI,IAAI,GAAGC,IAAI,KAAKH,aAGpCI,EAAuC,cAA7BC,OAAOC,SAASC,SAAyB,wCAAwC,sBA6NlFC,6MA1NXC,MAAQ,CACJC,kBAAkB,EAClBJ,SAAU,CACNK,IAAK,OACLC,IAAK,QAETC,KAAM,EACNC,aAAc,CACVjB,KAAK,GACLI,QAAQ,IAEZc,gBAAgB,EAChBC,aAAa,EACbC,SAAU,GACVC,MAAM,QAGVC,OAASC,IAAMC,cA+DfC,YAAc,WACV,IAAMR,EAAe,CACjBjB,KAAK0B,EAAKd,MAAMK,aAAajB,KAC7BI,QAAQsB,EAAKd,MAAMK,aAAab,SAIpC,OAAsB,OAFPP,IAAI8B,SAASV,EAAcrB,GAE5ByB,OAAgBK,EAAKd,MAAMC,oBAG7Ce,aAAe,SAACC,GACZA,EAAEC,iBAGCJ,EAAKD,gBACJC,EAAKK,SAAS,CACVb,gBAAgB,IAEpBc,MAAMzB,EAAQ,CACV0B,OAAQ,OACRC,QAAS,CACNC,eAAe,oBAElBC,KAAMC,KAAKC,UAAU,CACjBtC,KAAK0B,EAAKd,MAAMK,aAAajB,KAC7BI,QAAQsB,EAAKd,MAAMK,aAAab,QAChCmC,SAAUb,EAAKd,MAAMH,SAASK,IAC9B0B,UAAWd,EAAKd,MAAMH,SAASM,QAGtC0B,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAArC,GAEF,IAAIwC,EAAQC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAnB,IACZqB,WAAW,WACPH,EAASb,SAAS,CACdb,gBAAgB,EAChBC,aAAa,IAEjByB,EAASI,cACX,OAELC,MAAM,SAAA5B,GACH,IAAIuB,EAAQC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAnB,IACZqB,WAAW,WACPH,EAASb,SAAS,CACdV,MAAO,4BACPH,gBAAgB,EAChBC,aAAa,KAElB,WAMf+B,eAAiB,SAACrB,GACdH,EAAKK,SAAS,CACVd,aAAa4B,OAAAM,EAAA,EAAAN,CAAA,GACLnB,EAAKd,MAAMK,aADP4B,OAAAO,EAAA,EAAAP,CAAA,GAEPhB,EAAEwB,OAAOrD,KAAO6B,EAAEwB,OAAOC,uFAzHzB,IAAAC,EAAAC,KACTxB,MAAMzB,GACLkC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAArB,GACF,IAAMqC,EAAmB,GACzBrC,EAAWA,EAASsC,OAAO,SAACC,EAAKvD,GAC7B,IAAMwD,EAAG,GAAAC,OAAMzD,EAAQmC,SAASuB,QAAQ,IAA/BD,OAAoCzD,EAAQoC,UAAUsB,QAAQ,IAQvE,OAPGL,EAAiBG,IAChBH,EAAiBG,GAAKG,cAAgBN,EAAiBG,GAAKG,eAAiB,GAC7EN,EAAiBG,GAAKG,cAAcC,KAAK5D,KAEzCqD,EAAiBG,GAAOxD,EACxBuD,EAAIK,KAAK5D,IAENuD,GACT,IACFJ,EAAKxB,SAAS,CACVX,eAGP6B,MAAM,SAAA5B,GAAK,OAAIkC,EAAKxB,SAAS,CAAEV,MAAO,+EAGxB,IAAA4C,EAAAT,KACfA,KAAKR,aAELkB,UAAUC,YAAYC,mBAAmB,SAACC,GACtCC,QAAQC,IAAIF,GACTA,GACCJ,EAAKlC,SAAS,CACVtB,SAAU,CACNK,IAAIuD,EAASG,OAAOjC,SACpBxB,IAAIsD,EAASG,OAAOhC,WAExBxB,KAAK,GACLH,kBAAkB,KAG5B,SAACQ,GACCiD,QAAQC,IAAI,gCACZvC,MAAM,yBACDS,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAhC,GACHwD,EAAKlC,SAAS,CACbtB,SAAU,CACNK,IAAIL,EAAS8B,SACbxB,IAAIN,EAAS+B,WAEjBxB,KAAK,GACLH,kBAAkB,QAI9B,IAAM4D,EAAMjB,KAAKlC,OAAOoD,QACZ,OAARD,GACA1B,WAAW,WACP0B,EAAIE,eAAeC,kBACpB,sCAuEP,IAAMnE,EAAW+C,KAAK5C,MAAMH,SACtBoE,EAAkBrB,KAAK5C,MAAMO,YAMjC,GALE2D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACGZ,SAAU,CAAC5D,EAASK,IAAIL,EAASM,KACjChC,KAAOF,IAKRqG,EAAkB1B,KAAK5C,MAAMQ,SAAS+D,OACxC3B,KAAK5C,MAAMQ,SAASqD,IAAI,SAAArE,GACpB,OACI0E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQrB,IAAKxD,EAAQgF,IAClBf,SAAU,CAACjE,EAAQmC,SAASnC,EAAQoC,WACpCzD,KAAOW,GAERoF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAK5E,EAAQJ,MAAhB,KAA6BI,EAAQA,SACpCA,EAAQ2D,cACN3D,EAAQ2D,cAAcU,IAAI,SAACa,EAAMC,GAC7B,OACGT,EAAAC,EAAAC,cAAA,KAAGpB,IAAK,OAAO2B,GAAGT,EAAAC,EAAAC,cAAA,UAAKM,EAAKtF,MAA5B,KAAyCsF,EAAKlF,WAGtD,OAKhB,GAEIoF,EAAahC,KAAK5C,MAAMM,gBAAmBsC,KAAK5C,MAAMO,cAAeqC,KAAK5C,MAAMC,iBAYlF2C,KAAK5C,MAAMM,iBAAmBsC,KAAK5C,MAAMC,iBAC1CiE,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aAAaC,IAAI,cAAcC,IAAI,eAClDb,EAAAC,EAAAC,cAACY,EAAA,EAAD,yCAbCd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,SAAUtC,KAAK5B,cACjBkD,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,IAAI,QAAX,QACAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,SAAU3C,KAAKN,eAAgBkD,KAAK,OAAOpG,KAAK,OAAOqG,GAAG,OAAOC,YAAY,qBAExFxB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,IAAI,WAAX,WACAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,SAAU3C,KAAKN,eAAgBkD,KAAK,WAAWpG,KAAK,UAAUqG,GAAG,UAAUC,YAAY,wBAElGxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQC,OAAO,OAAOC,UAAWjD,KAAK/B,eAAtC,SAOR,OACIqD,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAKC,OAAQ,CAAClG,EAASK,IAAIL,EAASM,KAAMC,KAAMwC,KAAK5C,MAAMI,KAAO4F,IAAKpD,KAAKlC,OAAQmE,UAAU,OAC1FX,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELlC,EACAK,GAELJ,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAMvB,UAAU,gBACZX,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,+BACApC,EAAAC,EAAAC,cAACY,EAAA,EAAD,2CACCpC,KAAK5C,MAAMS,MAAOyD,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUH,UAAU,WAAWjC,KAAK5C,MAAMS,OAAmB,GAC/EmE,YAnNL2B,aC9BEC,QACW,cAA7B5G,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS2G,MACvB,2DCTNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC,mCEnInBrJ,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c879d1eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat_location_current.7267d3fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat_location.0cb38dea.svg\";","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n//import 'bootstrap/scss/_card.scss'\nimport Leaflet from 'leaflet'\nimport { Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport Joi from 'joi';\nimport othersIconUrl from './chat_location_current.svg';\nimport currentIconUrl from './chat_location.svg';\nimport iconShadowUrl from './chat_location_shadow.svg';\n\nconst myIcon = Leaflet.icon({\n    iconUrl: currentIconUrl,\n    iconSize: [50, 82],\n    iconAnchor: [0, 82],\n    popupAnchor: [25, -65],\n    shadowUrl: iconShadowUrl,\n    shadowRetinaUrl: iconShadowUrl,\n    shadowSize: [50, 82],\n    shadowAnchor: [0, 93]\n});\n\nconst othersIcons = Leaflet.icon({\n    iconUrl: othersIconUrl,\n    iconSize: [50, 82],\n    iconAnchor: [0, 82],\n    popupAnchor: [25, -65],\n    shadowUrl: iconShadowUrl,\n    shadowRetinaUrl: iconShadowUrl,\n    shadowSize: [50, 82],\n    shadowAnchor: [0, 93]\n});\n\nconst schema = Joi.object().keys({\n    name: Joi.string().regex(/^[a-zA-Z0-9À-ž -_]{1,100}$/).required(),\n    message: Joi.string().min(1).max(500).required()\n});\n\nconst API_URL = window.location.hostname === 'localhost'?'http://localhost:5000/api/v1/messages':'production_url_here'\n\nclass App extends Component {\n    state = {\n        haveUserLocation: false,\n        location: {\n            lat: 44.439,\n            lng: 26.096,\n        },\n        zoom: 2,\n        userMeassage: {\n            name:'',\n            message:''   \n        },\n        sendingMessage: false,\n        sentMessage: false,\n        messages: [],\n        error:null\n    }\n    \n    mapRef = React.createRef()\n    \n    getMesages() {\n        fetch(API_URL)\n        .then(res => res.json())\n        .then(messages=> {\n            const haveSeenLocation = {};\n            messages = messages.reduce((all, message) => {\n                const key = `${message.latitude.toFixed(3)}${message.longitude.toFixed(3)}`;\n                if(haveSeenLocation[key]) {\n                    haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n                    haveSeenLocation[key].otherMessages.push(message);\n                } else {\n                    haveSeenLocation[key] = message;\n                    all.push(message);\n                }\n                return all;\n            },[])\n            this.setState({\n                messages\n            })\n        })\n        .catch(error => this.setState({ error: 'Canot load data from server!'}));\n    }\n    \n    componentDidMount(){\n        this.getMesages();\n            \n        navigator.geolocation.getCurrentPosition((position)=> {\n            console.log(position);\n            if(position) {\n                this.setState({\n                    location: {\n                        lat:position.coords.latitude,\n                        lng:position.coords.longitude\n                    },\n                    zoom:15,\n                    haveUserLocation: true\n                })\n            }\n        },(error) =>{\n            console.log(\"we don't have their location\");\n            fetch('https://ipapi.co/json')\n                .then(res=>res.json())\n                .then(location=>{\n                   this.setState({\n                    location: {\n                        lat:location.latitude,\n                        lng:location.longitude\n                    },\n                    zoom:15,\n                    haveUserLocation: true\n                })\n                })\n        });\n        const map = this.mapRef.current\n        if (map !== null) {\n            setTimeout(function(){ \n                map.leafletElement.invalidateSize();\n            }, 400);\n        }  \n    }\n    \n    formIsValid = () => {\n        const userMeassage = {\n            name:this.state.userMeassage.name,\n            message:this.state.userMeassage.message,\n        }\n        const result = Joi.validate(userMeassage, schema);\n        //console.log('validation error: '+result.error);\n        return result.error===null && this.state.haveUserLocation\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n//        console.log(this.state.userMeassage);\n        \n        if(this.formIsValid()) {\n            this.setState({\n                sendingMessage: true\n            });\n            fetch(API_URL,{\n                method: 'POST',\n                headers: {\n                   'content-type':'application/json'   \n                },\n                body: JSON.stringify({\n                    name:this.state.userMeassage.name,\n                    message:this.state.userMeassage.message, \n                    latitude: this.state.location.lat,\n                    longitude: this.state.location.lng\n                })\n            })\n            .then(res => res.json())\n            .then(message=> {\n               // console.log(message);\n                let thisInst = this;\n                setTimeout(function(){ \n                    thisInst.setState({\n                        sendingMessage: false,\n                        sentMessage: true\n                    });\n                    thisInst.getMesages()\n                },1000);\n            })\n            .catch(error => {\n                let thisInst = this;\n                setTimeout(function(){\n                    thisInst.setState({ \n                        error: 'Canot add data to server!',\n                        sendingMessage: false,\n                        sentMessage: false\n                   })  \n                }, 1000)\n                  \n            });\n        }\n    }\n    \n    handleOnChange = (e) => {\n        this.setState({\n            userMeassage: {\n                ... this.state.userMeassage,\n                [e.target.name]: e.target.value\n            } \n        })\n               \n    }\n    \n    render() {\n        const location = this.state.location;\n        const markedLocation = !this.state.sentMessage?(\n            <Marker \n               position={[location.lat,location.lng]}\n               icon ={myIcon}\n            >\n            </Marker> \n        ):'';\n\n        const othersLocations = this.state.messages.length?(\n            this.state.messages.map(message => {\n                return(\n                    <Marker key={message._id}\n                       position={[message.latitude,message.longitude]}\n                       icon ={othersIcons}\n                    >\n                      <Popup>\n                        <p><em>{message.name}</em>: {message.message}</p>\n                        {message.otherMessages?(\n                           message.otherMessages.map((item, i) => {\n                               return(\n                                  <p key={'item'+i}><em>{item.name}</em>: {item.message}</p> \n                               )\n                           }) \n                        ):''}\n                      </Popup>\n                    </Marker> \n                )\n            })\n        ):'';\n        \n        const formShow = (!this.state.sendingMessage && !this.state.sentMessage && this.state.haveUserLocation)? (\n            <Form onSubmit={this.handleSubmit}>\n                <FormGroup>\n                    <Label for=\"name\">Name</Label>\n                    <Input onChange={this.handleOnChange} type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter your Name\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"message\">Message</Label>\n                    <Input onChange={this.handleOnChange} type=\"textarea\" name=\"message\" id=\"message\" placeholder=\"Enter your Message\" />\n                </FormGroup>\n                <Button colour=\"info\" disabled={!this.formIsValid()}>Send</Button>\n            </Form>\n        ): (this.state.sendingMessage || !this.state.haveUserLocation?\n           <img className=\"loadin_img\" src=\"loading.gif\" alt=\"loading...\" /> :\n           <CardText>Thanks for submitting a message!</CardText>       \n        )\n        \n        return (\n            <div className=\"map\">    \n                <Map center={[location.lat,location.lng]} zoom={this.state.zoom}  ref={this.mapRef} className=\"map\">\n                    <TileLayer\n                      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {markedLocation}\n                    {othersLocations}\n                </Map>\n                <Card className=\"message-form\">\n                    <CardBody>\n                      <CardTitle>Welcome to GuestM.app!</CardTitle>\n                      <CardText>Live a message with your location!</CardText>\n                      {this.state.error?(<CardText className=\"warning\">{this.state.error}</CardText>):''}\n                      {formShow}\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Leaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/'\n//import 'leaflet/dist/images/marker-icon.png'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chat_location_shadow.cc966781.svg\";"],"sourceRoot":""}